name: Deploy Lambda function

on:
  push:
    branches:
      - dev
      - stage
      - prod
jobs:
  changedfiles:
    name: changedfiles
    runs-on: ubuntu-latest
    outputs:
      layer: ${{ steps.changes.outputs.layer}}
      lambdas: ${{ steps.changes.outputs.lambdas }}
      req: ${{ steps.changes.outputs.req }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      # - name: Run Codacy Analysis CLI
      #   uses: codacy/codacy-analysis-cli-action@master

      # - uses: sonarsource/sonarqube-scan-action@master
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      #     SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      # # If you wish to fail your job when the Quality Gate is red, uncomment the
      # # following lines. This would typically be used to fail a deployment.
      # - uses: sonarsource/sonarqube-quality-gate-action@master
      #   timeout-minutes: 5
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Set up Dev environment
        if: endsWith(github.ref, '/dev')
        run: |
          echo "ENVIRONMENT=DEV" >> $GITHUB_ENV
          echo "PARAMETERNAME=lambda_last_commit_id_dev" >> $GITHUB_ENV

      - name: Set up Stage environment
        if: endsWith(github.ref, '/stage')
        run: |
          echo "ENVIRONMENT=STAGE" >> $GITHUB_ENV
          echo "PARAMETERNAME=lambda_last_commit_id_stage" >> $GITHUB_ENV

      - name: Set up Prod environment
        if: endsWith(github.ref, '/main')
        run: |
          echo "ENVIRONMENT=PROD" >> $GITHUB_ENV
          echo "PARAMETERNAME=lambda_last_commit_id_prod" >> $GITHUB_ENV

      - name: aws-ssm-to-env
        uses: bomb-on/aws-ssm-to-env@master
        env:
          AWS_REGION: "us-east-1"
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        with:
          ssm_parameter_list: ${{ env.PARAMETERNAME }}
 
      - name: Get changed files
        id: changes
        # Set outputs using the command.
        run: |
          echo "::set-output name=layer::$(git diff --name-only $AWS_SSM_LAMBDA_LAST_COMMIT_ID_${{ env.ENVIRONMENT }}..HEAD | grep "src/*"| xargs)"
          echo "::set-output name=lambdas::$(git diff --name-only $AWS_SSM_LAMBDA_LAST_COMMIT_ID_${{ env.ENVIRONMENT }}..HEAD | grep "lambdas/*"| xargs)"
          echo "::set-output name=req::$(git diff --name-only $AWS_SSM_LAMBDA_LAST_COMMIT_ID_${{ env.ENVIRONMENT }}..HEAD | grep "requirements.txt" | xargs)"
          #echo "::set-output name=layer::$(git diff --name-only --diff-filter=ACMRT `git rev-parse @~` | grep "src/*"| xargs)"
          #echo "::set-output name=lambdas::$(git diff --name-only --diff-filter=ACMRT `git rev-parse @~` | grep "lambdas/*" | xargs)"
          #echo "::set-output name=req::$(git diff --name-only --diff-filter=ACMRT `git rev-parse @~` | grep "requirements.txt" | xargs)"

  deploylambda:
    runs-on: ubuntu-latest
    # require the first job to have ran
    needs: changedfiles
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Set up Dev environment
        if: endsWith(github.ref, '/dev')
        run: |
          echo "ENVIRONMENT=dev" >> $GITHUB_ENV
      - name: Set up Stage environment
        if: endsWith(github.ref, '/stage')
        run: |
          echo "ENVIRONMENT=stage" >> $GITHUB_ENV
      - name: Set up Prod environment
        if: endsWith(github.ref, '/main')
        run: |
          echo "ENVIRONMENT=prod" >> $GITHUB_ENV
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@13d241b293754004c80624b5567555c4a39ffbe3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "us-east-1"

      - uses: actions/setup-python@v4
        with:
          python-version: '3.9'

    # only run there are changed files
      - if: ${{needs.changedfiles.outputs.layer || needs.changedfiles.outputs.req}}
        name: Deploy lambda layer
        id: deploy-lambda-layer
        run: ./.github/scripts/build-layer.sh
        env:
          FILES: ${{needs.changedfiles.outputs.layer}}
          COMMITID: ${{ github.sha }}
          ENV: ${{ env.ENVIRONMENT }}

      - if: ${{needs.changedfiles.outputs.lambdas}}
        name: Deploy lambda function
        id: deploy-lambda-function
        run: ./.github/scripts/build-lambda.sh
        env:
          FILES: ${{needs.changedfiles.outputs.lambdas}}
          COMMITID: ${{ github.sha }}
          ENV: ${{ env.ENVIRONMENT }}

      - name: Microsoft Teams Notification
        uses: skitionek/notify-microsoft-teams@master
        if: always()
        with:
          webhook_url: ${{ secrets.TEAMS_WEBHOOK }}
          needs: ${{ toJson(needs) }}
          job: ${{ toJson(job) }}
          steps: ${{ toJson(steps) }}
